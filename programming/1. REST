# REST 란?
Representational State Transfer의 약자로 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것을 의미합니다.
1. HTTP URI (Uniform Resource Identifier)를 통해 자원(Resource)를 명시하고,
2. HTTP Method (POST, GET, PUT, DELETE, PATCH 등)을 통해
3. 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미합니다.

# 구성요소
1. 자원 : HTTP URI
2. 자원에 대한 행위 : HTTP Method
3. 자원에 대한 행위의 내용 : HTTP Message Payload

# 특징
1. Server-Client (서버 - 클라이언트 구조)
- Client와 Server의 역할이 확실히 구분되기 때문에 의존성이 줄어든다.
2. Stateless (무상태)
- 작업을 위한 상태 정보를 따로 저장하고 관리하지 않는다.
3. Cacheable (캐시 처리 가능)
- 웹 표준 HTTP 프로토콜을 그대로 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있다.
- Last-Modified 태그나 E-Tag 를 통해 캐싱을 구현할 수 있다,
4. Layered System (계층화)
- 다중 계층으로 구성될 수 있다.
5. Uniform Interface (인터페이스 일관성)
- 자원은 유일하게 식별 가능해야하고
- HTTP Method로 표현을 담아야 하며,
- 메세지는 스스로를 설명할 수 있고, (self-descriptive message) (API 명세에 대한 링크를 제공하는 방식으로 구현)
- 애플리케이션의 상태가 전이될 수 있어야 한다. (Hypermedia As The Engine Of Application State)

# 장 / 단점
장점
1. HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API를 위한 별도의 인프라를 구축할 필요가 없다.
2. HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.
3. REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.
4. 서버와 클라이언트의 역할을 명확하게 분리한다.

단점
1. 표준에 대한 정의가 필요하다.
2. HTTP Method의 형태가 제한적이다.

# 설계
1. URI는 동사보다 명사를, 대문자보다는 소문자를 사용하여야 한다.
2. 마지막에 슬래시(/)를 포함하지 않는다.
3. 언더바 대신 하이픈을 사용한다.
4. 파일 확장자는 URI에 포함하지 않는다.
5. 행위를 포함하지 않는다.
